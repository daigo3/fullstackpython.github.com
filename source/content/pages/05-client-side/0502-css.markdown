title: Cascading Style Sheets
category: page
slug: cascading-style-sheets
sort-order: 0502
choice1url: ./javascript.html
choice1icon: fa-html5 fa-inverse
choice1text: JavaScriptを使ってインタラクティブなコンテンツを作るには？
choice2url: ./static-content.html
choice2icon: fa-spinner fa-inverse
choice2text: CSSのような静的なファイルをホストするには？
choice3url: ./source-control.html
choice3icon: fa-code-fork fa-inverse
choice3text: どのようにコードのバージョン管理をすれば良いですか？
choice4url: ./application-programming-intefaces.html
choice4icon: fa-exchange
choice4text: APIとは？


# Cascading Style Sheets (CSS)
<!-- Cascading Style Sheet (CSS) files contain rules for how to display and 
lay out the HTML content when it is rendered by a web browser. -->
Cascading Style Sheet(CSS)は、Webブラウザに表示されたHTMLコンテンツをどのように表示するか、どのように配置するかを定義したルールを含んだファイルです。

<!-- ## Why is CSS necessary? -->
## なぜCSSが必要？
<!-- CSS separates the content contained in HTML files from how the content 
should be displayed. It is important to separate the content from the rules
for how it should be rendered primarily because it is easier to reuse those
rules across many pages. CSS files are also much easier to maintain on large
projects than styles embedded within the HTML files. -->
CSSはページのコンテンツを記述しているHTMLとは別に、ページをどのように表示するかを定義することができます。コンテンツと、その見せ方の定義を分離できるということは重要です。複数ページに対してCSSを再利用することができるからです。また、HTMLに直接CSSを埋め込まずに、CSSファイルとして独立させることで、プロジェクトの規模が大きくなった時にメンテナンスしやすくなるという利点もあります。

<!-- ## How is CSS retrieved from a web server? -->
## WebサーバでCSSを扱うには？

<!-- The HTML file sent by the web server contains a reference to the CSS file(s)
needed to render the content. The web browser requests the CSS file after the
HTML file as shown below in a screenshot captured of the Chrome Web Developer 
Tools network traffic. -->
Webサーバによって配信されるHTMLファイルには、コンテンツを表示するために必要なCSSファイルへの参照が含まれています。ChromeのWeb Developer Toolsで確認できるように、WebブラウザはHTMLファイルをリクエストした後にCSSファイルをリクエストを行います。

<img src="theme/img/css-chrome-dev-tools.jpg" width="100%" alt="Google Chrome Web Developer Tools shows how CSS is separate from the HTML content." class="technical-diagram" />

<!-- That request for the fsp.css file is made because the HTML file for Full 
Stack Python contains a reference to ``theme/css/fsp.css`` which is shown
in the view source screenshot below. -->
`fsp.css`ファイルへのリクエストはFull Stack Pythonのページが``theme/css/fsp.css``を参照しているためです。以下のスクリーンショットを見てください。

<img src="theme/img/fsp-css-source.jpg" width="100%" alt="View source screenshot for the fsp.css file in index.html." class="technical-diagram" />


<!-- ## CSS preprocessors -->
## CSSプリプロセッサ
<!-- A CSS preprocessor compiles a processed language into plain CSS code. CSS 
preprocessing languages add syntax such as variables, mixins and functions
to reduce code duplication. The additional syntax also makes it possible for
designers to use these basic programming constructs to write maintainable
front end code. -->
CSSプリプロセッサはCSSに変換される言語です。CSSプリプロセッサは変数、ミックスイン、コードの重複を減らすための関数と言った機能をCSSに追加しています。CSSプリプロセッサで利用できる文法を使うことで、デザイナーが基本的なプログラミングの構造でメンテナンス性の高いフロントエンドのコードを書くことができるようになります。

<!-- * [Sass](http://sass-lang.com/) is currently the favored preprocessor in
  the design community. Sass is considered the most powerful CSS preprocessor
  in terms of advanced language features. -->
* [Sass](http://sass-lang.com/)は、現時点で最も人気のあるプリプロセッサです。Sassは、CSSプリプロセッサの中でも最も強力な機能を持っていると言われています。

<!-- * [LESS](http://lesscss.org/) is right up there with Sass and has an ace up
  its sleeve in that the [Bootstrap Framework](http://getbootstrap.com/) is
  written in LESS which brings up its popularity. -->
* [LESS](http://lesscss.org/)はSassに迫る人気があり、[Bootstrap Framework](http://getbootstrap.com/)で利用されていることから、人気が出始めています。

<!-- * [Stylus](http://learnboost.github.io/stylus/) is often cited as the third
  most popular CSS preprocessing language. -->
* [Stylus](http://learnboost.github.io/stylus/)も有名なCSSプリプロセッサです。

<!-- ### CSS preprocessor resources -->
### CSSプリプロセッサを学ぶためのリソース

<!-- * The Advanced Guide to HTML and CSS book has a well-written chapter on 
  [preprocessors](http://learn.shayhowe.com/advanced-html-css/preprocessors). -->
HTMLとCSSについての応用的なガイドで[preprocessors](http://learn.shayhowe.com/advanced-html-css/preprocessors)に関する詳しい章があります。

<!-- * [Sass vs LESS](http://css-tricks.com/sass-vs-less/) provides a short answer
  on which framework to use then a longer more detailed response for those
  interested in understanding the details. -->
* [Sass vs LESS](http://css-tricks.com/sass-vs-less/)では、どちらのフレームワークを使うべきかを考察しています。また、この記事へのコメントを読むことで、より深い理解を得ることができます。

<!-- * [How to choose the right CSS preprocessor](http://blog.teamtreehouse.com/how-to-choose-the-right-css-preprocessor)
  has a comparison of Sass, LESS and Stylus. -->
* [How to choose the right CSS preprocessor](http://blog.teamtreehouse.com/how-to-choose-the-right-css-preprocessor)ではSass、LESS、Stylusの比較を行っています。

<!-- * [Musings on CSS preprocessors](http://css-tricks.com/musings-on-preprocessing/)
  contains helpful advice ranging from how to work with preprocessors in a
  team environment to what apps you can use to aid your workflow. -->
* [Musings on CSS preprocessors](http://css-tricks.com/musings-on-preprocessing/)はチーム開発でのCSSプリプロセッサの使い方と、便利なツールを紹介しています。

<!-- ## CSS frameworks -->
## CSSフレームワーク
<!-- CSS frameworks provide structure and a boilerplate base for building a
web application's design. -->
CSSフレームワークはWebアプリケーションのデザインに構造と基本スタイルを提供しているものです。

* [Bootstrap](http://getbootstrap.com/)

* [Foundation](http://foundation.zurb.com/)

* [Gumby](http://gumbyframework.com/)

* [Compass](http://compass-style.org/)

* [Profound Grid](http://www.profoundgrid.com/)

* [Skeleton](http://www.getskeleton.com/)

* [HTML5 Boilerplate](http://html5boilerplate.com/)


<!-- ## CSS resources -->
## CSSを学ぶためのリソース

<!-- * [Frontend Development Bookmarks](https://github.com/dypsilon/frontend-dev-bookmarks)
  is one of the largest collections of valuable resources for frontend
  learning both in CSS as well as JavaScript. -->
* [Frontend Development Bookmarks](https://github.com/dypsilon/frontend-dev-bookmarks)はCSSとJavaScriptを学ぶための、最も価値のあるリソースの一つです。

<!-- * [Mozilla Developer Network's CSS page](https://developer.mozilla.org/en-US/docs/Web/CSS)
  contains an extensive set of resources, tutorials and demos for learning
  CSS. -->
* [Mozilla Developer Network's CSS page](https://developer.mozilla.org/en-US/docs/Web/CSS)には、CSSを学ぶためのリソース集、チュートリアル、デモが紹介されています。

<!-- * [CSS Positioning 101](http://alistapart.com/article/css-positioning-101)
  is a detailed guide for learning how to do element positioning correctly
  with CSS. -->
* [CSS Positioning 101](http://alistapart.com/article/css-positioning-101)は、CSSを使って要素の配置を正しく行う方法を学ぶことができます。

* [CSS3 cheat sheet](http://media.smashingmagazine.com/wp-content/uploads/images/css3-cheat-sheet/css3-cheat-sheet.pdf)

<!-- * [Learn CSS layout](http://learnlayout.com/toc.html) is a simple guide that
  breaks CSS layout topics into chapters so you can learn each part one
  at a time. -->
* [Learn CSS layout](http://learnlayout.com/toc.html)はCSSのレイアウトに関して、トピック毎に学ぶことができます。

<!-- * [Google's Web Fundamentals class](https://developers.google.com/web/fundamentals/)
  shows how to create responsive designs and performant websites. -->
* [Google's Web Fundamentals class](https://developers.google.com/web/fundamentals/)では、レスポンシブデザインとWebサイトのパフォーマンスについて解説しています。

<!-- * [Tailoring CSS for performance](http://programming.oreilly.com/2014/04/tailoring-css-for-performance.html)
  is an interesting read since many developers do not consider the 
  implications of CSS complexity in browser rendering time. -->
* [Tailoring CSS for performance](http://programming.oreilly.com/2014/04/tailoring-css-for-performance.html)は、複雑なCSSがブラウザのレンダリングに与える影響を考えている人が少ないということを指摘している興味深い記事です。

<!-- * [Can I Use...](http://caniuse.com/) is a compatibility table that shows
  which versions of browsers implement specific CSS features. -->
* [Can I Use...](http://caniuse.com/)は、特定のCSSの機能がどのブラウザのバージョンに対応しているかをまとめています。


<!-- ## CSS learning checklist -->
## CSSを学ぶためのチェックリスト

<i class="fa fa-check-square-o"></i> 
<!-- Create a simple HTML file with basic elements in it. Use the
``python -m SimpleHTTPServer`` command to serve it up. Create a 
``<style></style>`` element within the ``<head>`` section in the HTML page. 
Start playing with CSS within that style element to change the look and feel 
of the page. -->
基本的な要素を含んだ簡単なHTMLを作りましょう。``python -m SimpleHTTPServer``コマンドを使って、サーバを起動し、HTMLを配信します。HTMLの``<head>``セクションに``<style></style></style>``を用意し、HTML内の要素に対して色々なスタイルを適用してみましょう。

<i class="fa fa-check-square-o"></i>
<!-- Check out front end frameworks such as Bootstrap and Foundation and integrate
one of those into the HTML page. -->
BootstrapやFoundationのようなフロントエンドのフレームワークを調べて、実際に使ってみましょう。

<i class="fa fa-check-square-o"></i> 
<!-- Work through the framework's grid system, styling options and customization
so you get comfortable with how to use the framework. -->
フレームワークのグリッドシステム、スタイルオプション、カスタマイズ方法について学び、実際に使えるようになりましょう。

<i class="fa fa-check-square-o"></i> 
<!-- Apply the framework to your web application and tweak the design until you
have something that looks much better than generic HTML. -->
あなたのWebアプリケーションにCSSフレームワークを導入し、より良いデザインにしていきましょう。


<!-- ### Once your app is styled what do you need to learn next? -->
### アプリケーションのスタイルを作ったら、次に何をしますか？
